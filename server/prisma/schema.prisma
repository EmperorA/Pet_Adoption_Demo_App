generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                     String        @id @default(uuid())
  username               String
  email                  String        @unique
  password               String
  role                   String
  token                  String?
  tokenCreationTimestamp DateTime?     @default(now()) @db.Timestamptz(3)
  listings               Listing[]
  applications           Application[] // Back-relation to Application
}

model Listing {
  id                  String        @id @default(uuid())
  petName             String
  petPhoto            String
  petType             String
  petBreed            String?
  petAge              Int
  location            String
  description         String?
  tags                String
  creationTimestamp   DateTime      @default(now())
  lastUpdateTimestamp DateTime      @updatedAt
  published           Boolean       @default(false)
  userId              String
  user                User          @relation(fields: [userId], references: [id])
  applications        Application[] // Back-relation to Application
}

model Form {
  id                  String   @id @default(uuid())
  petType             String
  questionType        String
  question            String
  answerOptions       String
  creationTimestamp   DateTime @default(now())
  lastUpdateTimestamp DateTime @updatedAt
}

model Application {
  id                  String     @id @default(uuid())
  listingId           String
  userId              String
  hasDocuments        Boolean
  status              String
  creationTimestamp   DateTime   @default(now())
  lastUpdateTimestamp DateTime   @updatedAt
  listing             Listing    @relation(fields: [listingId], references: [id])
  user                User       @relation(fields: [userId], references: [id])
  documents           Document[] // Back-relation to Document
}

model Document {
  id                  String      @id @default(uuid())
  applicationId       String
  document            Bytes       @db.ByteA
  creationTimestamp   DateTime    @default(now())
  lastUpdateTimestamp DateTime    @updatedAt
  application         Application @relation(fields: [applicationId], references: [id])
}
